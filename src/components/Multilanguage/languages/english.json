{
  "homeName": "I'm John",
  "homeFrom": "based in Manhattan, New York.",
  "homeAbout1": "I'm passionate about creating accessible, user-centered",
  "homeAbout2": "applications that enhance people's lives.",
  "homeAbout3": "I also love React.",
  "homeButtonText": "Take a look at my work",
  "navProjects": "Projects",
  "navAbout": "About",
  "navContact": "Contact",
  "projectsHeading": "Projects",
  "projectsSubheading": "(newest to oldest)",
  "viewSource": "View Source",
  "viewLiveVersion": "Live Site",
  "password": "Password",
  "technologiesUsed": "Technologies Used",
  "more": "More",
  "less": "Less",
  "aboutProject": "About",
  "oblHeading": "OnboardList's Blog Site",
  "oblSubheading": "A blog to increase user traffic and client sign up",
  "aboutObl1": "I signed an NDA for this, so I can't show the code. However, I can provide insight into my involvement thus far.",
  "aboutObl2": "The purpose of the blog site was to allow potential clients to sign up to trial OnboardList's onboarding SaaS, which was in its MVP phase. This undertaking required learning Next.js, TypeScript, and Sanity (a very new headless CMS). Using all three was a revelation to me. Features like server-side rendering and how the folder structures serves routing immediately jumped out to me. Next.js made everything so much faster, simpler, and efficient.",
  "aboutObl3": "Addtionally, using Sanity and its GROQ querying language was also a fun experience. Sanity Studio's interface is so accessible that the marketing team had no issues creating blog posts, especially once we set up Sanity's Block Content, which served to serialize and style the diverse content in each blog post.",
  "aboutObl4": "As for TypeScript, it was the experience that put the biggest smile on my face. Admittedly, I'm still learning and there was some getting used to earlier on, but I love how TypeScript forces you to not only write better code, but to understand your applicatiuon that much better. I look forward to getting better with TypeScript moving forward.",
  "oblFeature1": "Chakra UI w/ Theme Providers",
  "oblFeature2": "Sanity for Backend Management",
  "oblFeature3": "Deployed Using Vercel",
  "oblFeature4": "Server-Side Rendering",
  "oblFeature5": "Email Sign-Up Button With MailerLite Implementation",
  "oblFeature6": "React Hooks",
  "growopHeading": "Grow Op/G.DEN Android Application",
  "growopSubheading": "A mobile app that allows users to control their grow devices remotely",
  "aboutGrowOp1": "I also signed an NDA before joining. My involvement was during the company's early app development.",
  "aboutGrowOp2": "This was my first time working on a mobile application and using React Native and Redux. Since I had experience with React, picking up React Native wasn't too difficult, save for learning new approaches to styling. In the beginning I did a bunch of wireframing, while trying to get acclimated to the complex codebase. From there, I moved onto having to understand how data was sent to the application and how wifi networks worked and what the login process was like behind the scenes. With this overview of the application and its data flow, I began working on how grow climate data, such as temperature, humidity, fan levels, and lighting schedules, would be gathered on the app and how it would display to users. I used Redux's architecture to gather data via timestamps and the meter readings that accompanied them. I then wrote tests to ensure data was being gathered correctly, and displayed them on graphs (using d3.js) and a React Native SVG package for the UI.",
  "aboutGrowOp3": "Additionally, I also worked on developing a bunch of UI components, as the application functioned as a market place, a forum, and for users to be able to save and apply different different gow configurations.",
  "aboutGrowOp4": "My time here really tested my ability to understand a complex, developing codebase, as well as my ability to see an application's complete architecture.",
  "growopFeature1": "Forum for the Grow Community",
  "growopFeature2": "Access grow history and single out specific grow data using graph interface",
  "growopFeature3": "UI Components w/ Real-Time Meter Readings from Grow Device(s)",
  "growopFeature4": "Lighting, Temperature, Fan, & Watering Control Buttons",
  "growopFeature5": "Login and Grow Configuration Forms",
  "travHeading": "Travelist Blog Site",
  "travSubheading": "A blog platform for travel lovers",
  "aboutTrav1": "This was a full-stack project to improve upon my skills in React, Node, PostgreSQL, Express, Git best practices, and testing with Jest and Enzyme.",
  "aboutTrav2": "There's always a lot of things you learn to do better when you go at it over and over again. With my previous full-stack application, there were inefficiencies in the code, as I was still trying to get used to putting all my knowledge together. With this project, I felt like I had more control and wrote more efficient code. If I had to pick one thing I felt I improved the most on here though, I think it would have to be writing tests with Jest and Enzyme. While I'm still developing my knowledge here, I LOVE writing tests. I love how thorough it forces you to be when thinking about how your application runs, and how each component or function works. It also forces you to understand edge cases. There's something really empowering about writing tests and making your code more predictable and manageable. As the risk of sounding cheesy, writing tests can be a beautiful thing. The other improvements of note is building forms. There's so much that goes into building a form (state, security, validations, making api requests with JSON Web tokens, event bubbling etc...) that I built a stronger appreciation of how everything weaves into their development.",
  "aboutTrav3": "NOTE: There's always a lot to improve on, especially with this project. For example, I could update this to use React Hooks instead of React's Context Provider, and make functional components as opposed to class components. But I find that it's important to document those improvements. There's actually a ton you can learn about yourself looking over older code with a very critical eye. When self-critiquing, I like to write notes to myself as if I were advising a younger engineer.",
  "travFeature1": "User Registration and Login",
  "travFeature2": "JSON Web Token to Validate User API Requests",
  "travFeature3": "Create, Edit, Delete Blog Posts and Comments",
  "travFeature4": "Vote on Favorite Posts",
  "travFeature5": "Top Users List",
  "travFeature6": "Ticker with Latest Travel News",
  "travFeature7": "Logs Off If No user Activity Using Session Storage",
  "travFeature8": "Filtered Search of Posts",
  "stockHeading": "Stocked",
  "stockSubheading": "An inventory tracker",
  "aboutStock1": "My first attempt at a full-stack application!",
  "aboutStock2": "I had learned the PERN stack technologies separately, and so the challenge was to put it all together for the first time. The tougher aspects of the project came from setting up the project and working with Knex for building queries and then understanding how to serialize the data.",
  "aboutStock3": "Again, there are many things that can be improved upon this project. It's a pretty basic application, but a good project to get started with. If I were to make a similar app, I would definitely use React Hooks. It would do away with the large-ish context provider.",
  "stockFeature1": "Filtered Search",
  "stockFeature2": "Create, Edit, Delete Items",
  "stockFeature3": "Login and Registration w/ JSON Web Tokens",
  "stockFeature4": "User logoff due to inactivity",
  "livableHeading": "Livable",
  "livableSubheading": "A one-stop shop for the latest, location-specific census data",
  "aboutLivable1": "This jQuery application was heavily influences by the datausa.io site. I LOVE datausa.io's site. I can't stress that enough. To be able to search a location, get relevant, comprehensive data (education, crime rate, median household income) of that location and then have a UI that allows for location comparisons -- it's amazing. It's amazing because it's utilitiarian, practical, easy-to-use and understand and has a pleasing design. It's everything I look to when I think about an application.",
  "aboutLivable2": "When I embarked on a project that finally let me play around with third-party APIs, I went a little nuts. To my knowledge there weren't any sources that provided free demographic data. It all required a hefty fee. But, there was one source that provided the data I needed, and it was the US Census Bureau's API. While certainly a wonderful source to obtain free data, the problem was it required a unique endpoint for each category of data. Thus, if you look into my code, you'll see a ton of API calls. Obviously this wouldn't be very efficient for a real application that serves actual customers, but for a project and for what I wanted, it was the only strategy I had. The two main issues I came across at the time with making so many API requests was 1. I wanted all the data to render at the same time, and 2. if one request failed, the user would receive an internal server error. To ameliorate this problem, each fetch request had its own catch for errors and if a category failed in its request, that category would just render an N/A. Additionally, as the user waits for data, a loading icon appears.",
  "aboutLivable3": "In the future, I'd like to create a similar application using a JS framework and add on a ton more features.",
  "livableFeature1": "Search County-Level Data via US Census Bureau API",
  "livableFeature2": "Lists Popular Locations via Google Maps API",
  "livableFeature3": "Responsive Design, with Cycling Images",
  "livableFeature4": "JavaScript Promises",
  "quizHeading": "Comic book Quiz App",
  "quizSubheading": "Quiz application for multiple choice answers",
  "aboutQuiz1": "My first application after playing around with tutorials. Even though it's a very simple application, I learned a ton and was very proud when I finished it. Simple things with css and simple logic that provides users with appropriate feedback based on if a question was correct or if they had enough questions correct to pass the quiz was very rewarding. I had an immense amount of fun making it.",
  "quizFeature1": "CSS Flexbox & CSS Grid",
  "quizFeature2": "Tracks User's Score",
  "quizFeature3": "Dynamic Images Based on Score",
  "quizFeature4": "Responsive Design",
  "contactMe": "Contact Me",
  "message": "Message",
  "nameRequired": "the name is required",
  "emailRequired": "the email is required",
  "messageRequired": "the message is required",
  "captchaRequired": "the recaptcha needs to be completed",
  "fieldRequired": "this field is required",
  "send": "Send",
  "goToPage": "Go to page",
  "of": "of",
  "successModalText": "Message sent! I'll be in touch shortly.",
  "whoIamHeading": "Who I am",
  "whoIamText1": "",
  "whoIamText2": "",
  "passions": "Passions",
  "codingHeading": "Coding",
  "codingText1": "What I love about coding is that it's constantly evolving.",
  "codingText2": "I'm the type of person who gets bored quickly when I feel that I have (semi-)mastered a field - but with coding there's always something new to learn. There's always a new technology, a new Framework, a new Library - and that's why I pick at least one new technology with every new project I start.",
  "writingHeading": "Writing",
  "dogsHeading": "Dogs",
  "dogsText1": "Ever since I was a child, I always wanted a dog. Since my parents were not fond of this idea, I volunteered at a regional animal shelter when I was an adult, which convinced me to get my own four-legged friend.",
  "dogsText2": "When I met my dog,",
  "dogsText3": ", there it was immediately clear that we belong together.",
  "dogsText4": "Through dogs I learned a lot about myself and after the experiences in the animal shelter and privately I even packed my collected knowledge in book form and started writing books.",
  "dogsText5": "To put it in the words of an unknown quote from the Internet:",
  "dogsText6": "Without a dog my house would be clean, my wallet would be full, but my heart would be empty.",
  "readNow": "Read Now",
  "acceptPrivacy": "I accept the",
  "privacyPolicy": "Privacy Policy",
  "cookieText1": "This website uses cookies to enhance the user experience.",
  "cookieText2": "Learn more.",
  "cookieAccept": "Accept",
  "contactFormCookieText1": "Because of Google ReCaptcha validation, it is essential that you give consent to store cookies. If you didn't accept it on purpose, you cannot use the contact form.",
  "contactFormCookieText2": "In this case, for further inquiries send an email to",
  "contactFormCookieText3": "If you've somehow missed the opportunity to give your cookie consent, you can",
  "contactFormCookieText4": "do it again."
}
